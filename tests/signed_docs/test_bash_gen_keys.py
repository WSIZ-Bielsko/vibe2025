import pytest
from pathlib import Path
from datetime import datetime
from uuid import uuid4
from vibe2025.signed_docs.processor import DocumentProcessor, Document, Paragraph


@pytest.fixture
def assets_dir():
    """Fixture providing path to assets directory"""
    return Path(__file__).parent / "assets"


@pytest.fixture
def sample_document():
    """Fixture providing a sample document for testing"""
    return Document(
        id=uuid4(),
        author_id=1,
        addressee_id=2,
        created_at=datetime.now(),
        content=[
            Paragraph(fixed_text="Dear", placeholder="name", text="John Doe"),
            Paragraph(fixed_text="Amount", placeholder="value", text="1000 USD")
        ]
    )


def test_openssl_generated_keys_compatibility(assets_dir, sample_document):
    """Test that keys generated by OpenSSL bash script work with DocumentProcessor"""
    # Verify assets directory exists
    assert assets_dir.exists(), f"Assets directory not found: {assets_dir}"

    # Define key file paths
    private_key_path = assets_dir / "document_key_private.pem"
    public_key_path = assets_dir / "document_key_public.pem"

    # Verify key files exist
    assert private_key_path.exists(), f"Private key not found: {private_key_path}"
    assert public_key_path.exists(), f"Public key not found: {public_key_path}"

    # Load the OpenSSL-generated private key
    processor = DocumentProcessor()
    loaded_key = processor.load_private_key(str(private_key_path))

    # Verify key loaded successfully
    assert loaded_key is not None
    assert processor.private_key is not None

    # Sign a document using the loaded key
    signature = processor.sign_document(sample_document, signator_id=100)

    # Verify signature was created
    assert signature.document_id == sample_document.id
    assert signature.signator_id == 100
    assert len(signature.signature) > 0
    assert len(signature.public_key) > 0

    # Verify the signature using the same processor
    is_valid = processor.verify_signature(sample_document, signature)
    assert is_valid is True, "Signature verification failed with same processor"

    # Create a new processor to verify signature independently
    new_processor = DocumentProcessor()
    is_valid_independent = new_processor.verify_signature(sample_document, signature)
    assert is_valid_independent is True, "Independent signature verification failed"

    # Verify public key from signature matches the public key file
    public_key_pem = public_key_path.read_text()
    # Normalize whitespace for comparison
    assert signature.public_key.strip() == public_key_pem.strip(), \
        "Public key in signature doesn't match the OpenSSL-generated public key"

    # Test with modified document (should fail)
    tampered_doc = sample_document.model_copy(deep=True)
    tampered_doc.content[0].text = "Tampered Text"
    is_valid_tampered = processor.verify_signature(tampered_doc, signature)
    assert is_valid_tampered is False, "Tampered document should not verify"

    print(f"âœ“ OpenSSL-generated keys from {assets_dir} are fully compatible")
